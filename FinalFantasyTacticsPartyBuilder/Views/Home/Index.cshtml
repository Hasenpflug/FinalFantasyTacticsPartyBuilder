@{
    ViewBag.Title = "Home Page";
}

<div id="party-overview-container">
    <div id="party-builder-container">
        <div class="unit-container new-unit-selector">
            <img class="job-blue-orb" src="~/Content/Images/blue_orb.png" />
            <a href="#">
                <div id="empty-unit-outline">
                    <div id="new-unit-cross-container">
                        <div id="new-unit-cross-vertical"></div>
                        <div id="new-unit-cross-horizontal"></div>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>
<script>
    var JobOverview = function ()
    {
        var piemenu, modifierChartCanvas, modifierChart, growthChartCanvas, growthChart, baseMoveJumpChartCanvas, baseMoveJumpChart, baseEvasionChartCanvas, baseEvasionChart,
            selectedJobData;

        function getModifierChart()
        {
            return modifierChart;
        }

        $(document).ready(function ()
        {
            if (typeof (Storage) !== 'undefined')
            {
                var unitData = { units: [] }

                localStorage.setItem("unitData", JSON.stringify(unitData));
                renderUnitPanels();
            }
        });

        $('.new-unit-selector').click(renderJobOverviewPanel);
        $('body').on('click', '.unit-container[data-unit-position]', renderUnitStatusPanel);
        $('body').on('click', '#gender-male-button, #gender-female-button', updateJobWheel);
        $('body').on('click', '#job-confirm-button', hireUnit);

        function renderUnitPanels()
        {
            var unitData = JSON.parse(localStorage.getItem('unitData'));
            $.post('/Home/GetUnitPanelPartial', unitData, function (data)
            {
                $('#party-builder-container').prepend(data);
            });
        }

        function renderUnitStatusPanel(event)
        {
            var unitPosition = event.currentTarget.attributes['data-unit-position'].nodeValue;
            var unitData = JSON.parse(localStorage.getItem('unitData'));

            for (var i = 0; i < unitData.units.length; i++)
            {
                if (unitData.units[i].position === unitPosition)
                {
                    unitData = unitData.units[i];
                    break;
                }
            }

            $('.unit-details-container').remove();

            $.post('/Home/GetUnitOverviewPartial', unitData, function (data)
            {
                $('#party-builder-container').append(data);
            });

            renderMenuPanel(event, unitPosition);
        }

        function renderMenuPanel(event, unitPosition)
        {
            $.post('/Home/GetUnitMenuPartial', unitPosition, function (data)
            {
                $('#party-builder-container').append(data);
            });
        }

        function renderJobOverviewPanel()
        {
            $.post('/Home/GetJobOverviewPartial', function (data)
            {                
                $('#party-overview-container').contents().remove();
                $('#party-overview-container').append(data);                
                renderJobSelectionPanel('Male');                
            });
        }

        function renderJobSelectionPanel(gender)
        {
            $.post('/Home/GetJobSelectionPartial', { gender: gender }, function (data)
            {
                $('#job-selection-container').remove();
                $('#job-overview-container').prepend(data);
                initializeJobWheel();
                initializeJobModifierChart();
                initializeJobGrowthChart();
                initializeJobMoveChart();
                initializeJobEvasionChart();
            });
        }

        function hireUnit()
        {
            var localUnitData = JSON.parse(localStorage.getItem('unitData'));
            var newUnitData = new Unit();
            unitData.jobID = selectedJobData.jobID;
            $.post('/Home/GetJobOverviewPartial', newUnitData, function (data)
            {                
                $('#party-overview-container').contents().remove();
                $('#party-overview-container').append(data);                
                renderJobSelectionPanel('Male');                
            });

            unitData.units.push({unitName: selectedJobData.})
        }

        function dismissUnit()
        {
            
        }

        function updateChartData(chart, jobData)
        {
            selectedJobData = jobData;
            document.getElementById('job-name').innerHTML = selectedJobData.name;
            modifierChart.data.datasets[0].data = [parseInt(selectedJobData.hpm), parseInt(selectedJobData.mpm), parseInt(selectedJobData.spm), parseInt(selectedJobData.pam),
                parseInt(selectedJobData.mam)];
            growthChart.data.datasets[0].data = [parseInt(selectedJobData.hpc), parseInt(selectedJobData.mpc), parseInt(selectedJobData.spc), parseInt(selectedJobData.pac),
                parseInt(selectedJobData.mac)];
            baseMoveJumpChart.data.datasets[0].data = [parseInt(selectedJobData.move), parseInt(selectedJobData.jump)];
            baseEvasionChart.data.datasets[0].data = [parseInt(selectedJobData.evasion)];
            modifierChart.update();
            growthChart.update();
            baseMoveJumpChart.update();
            baseEvasionChart.update();
        }

        function initializeJobWheel()
        {
            piemenu = new wheelnav('piemenu');
            piemenu.centerX = window.innerWidth / 2 - 50;
            piemenu.centerY = window.innerHeight / 3;
            piemenu.selectedPercent = 1.1;
            piemenu.hoverPercent = 1;
            piemenu.clockwise = false;
            piemenu.animatetime = 200;
            piemenu.maxPercent = 0.50;
            piemenu.animateeffect = 'linear';
            piemenu.createWheel();
        }

        function updateJobWheel(event)
        {
            if (piemenu !== 'undefined')
            {
                piemenu.removeWheel();
            }

            var gender = event.currentTarget.attributes['data-gender'].nodeValue;
            renderJobSelectionPanel(gender);
            if (gender === 'Male')
            {
                document.getElementById('gender-male-button').setAttribute('selected', true)
                document.getElementById('gender-female-button').setAttribute('selected', false)
            }
            else
            {
                document.getElementById('gender-male-button').setAttribute('selected', false);
                document.getElementById('gender-female-button').setAttribute('selected', true)
            }
        }

        function initializeJobModifierChart()
        {
            modifierChartCanvas = document.getElementById('job-modifier-chart');
            modifierChartCanvas.wid
            modifierChart = new Chart(modifierChartCanvas, {
                type: 'radar',
                data: {
                    labels: ["HPM", "MPM", "SPM", "PAM", "MAM"],
                    datasets: [{
                        label: 'Job Stat Modifiers',
                        data: [100, 75, 100, 90, 80],
                        borderColor: 'rgba(255, 0, 0, 0.5)',
                        backgroundColor: 'rgba(255, 0, 0, 0.34)',
                        pointBackgroundColor: 'white',
                        pointBorderColor: 'yellow',
                        defaultFontFamily: 'Altima',
                        defaultFontSize: '60'
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scale: {
                        ticks: {
                            suggestedMin: 40,
                            suggestedMax: 160,
                            stepSize: 10,
                            display: false
                        },
                        pointLabels: {
                            fontSize: 60,
                            fontFamily: 'Altima'
                        }
                    },
                    legend: false
                }
            });

            modifierChart.resize();
        }

        function initializeJobGrowthChart(data)
        {
            growthChartCanvas = document.getElementById('job-growth-chart');
            growthChart = new Chart(growthChartCanvas, {
                type: 'radar',
                data: {
                    labels: ["HPC", "MPC", "SPC", "PAC", "MAC"],
                    datasets: [{
                        label: 'Job Stat Constants',
                        data: [75, 76, 80, 68, 80],
                        borderColor: 'rgba(255, 0, 0, 0.5)',
                        backgroundColor: 'rgba(255, 0, 0, 0.34)',
                        pointBackgroundColor: 'white',
                        pointBorderColor: 'yellow',
                        defaultFontFamily: 'Altima',
                        defaultFontSize: '60'
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scale: {
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: 100,
                            stepSize: 10,
                            display: false
                        },
                        pointLabels: {
                            fontSize: 60,
                            fontFamily: 'Altima'
                        }
                    },
                    legend: false,
                }
            });

            growthChart.resize();
        }

        function initializeJobMoveChart(data)
        {
            baseMoveJumpChartCanvas = document.getElementById('job-move-chart');
            baseMoveJumpChart = new Chart(baseMoveJumpChartCanvas, {
                type: 'bar',
                data: {
                    labels: ["Move", "Jump"],
                    datasets: [{
                        label: 'Job Move Attributes',
                        data: [4, 3],
                        backgroundColor: 'rgba(255, 0, 0, 0.34)'
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 5,
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                fontSize: 40,
                                fontFamily: 'Altima'
                            }
                        }]
                    },
                    legend: false
                }
            });

            baseMoveJumpChart.resize();
        }

        function initializeJobEvasionChart()
        {
            baseEvasionChartCanvas = document.getElementById('job-evasion-chart');
            baseEvasionChart = new Chart(baseEvasionChartCanvas, {
                type: 'bar',
                data: {
                    labels: ["Evasion"],
                    datasets: [{
                        label: 'Job Base Evasion',
                        data: [5],
                        backgroundColor: 'rgba(255, 0, 0, 0.34)'
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 40,
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                fontSize: 40,
                                fontFamily: 'Altima'
                            }
                        }]
                    },
                    legend: false
                }
            });

            baseEvasionChart.resize();
        }
    
        function Unit()
        {
            this.name = '',
            this.maxhp = 0,
            this.maxmp = 0,
            this.gender = 0,
            this.position = 0,
            this.jobID = 1,
            this.jobName = '',
            this.hpc = 0,
            this.mpc = 0,
            this.spc = 0,
            this.pac = 0,
            this.mac = 0,
            this.secondaryJobID = 1,
            this.reactionID = 1
            this.supportID = 1,
            this.movementID = 1,
            this.weaponID = 1,
            this.shieldID = 1,
            this.headID = 1,
            this.bodyID = 1,
            this.accessoryID = 1,
            this.level = 1,
            this.experience = 0,
            this.brave = 0,
            this.faith = 0
        }

        return {
            getModifierChart: getModifierChart,
            initializeJobWheel: initializeJobWheel,
            initializeJobModifierChart: initializeJobModifierChart,
            initializeJobGrowthChart: initializeJobGrowthChart,
            initializeJobMoveChart: initializeJobMoveChart,
            initializeJobEvasionChart: initializeJobEvasionChart,
            updateChartData: updateChartData
        }

    }();
</script>

